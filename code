#write code here

import numpy as np
import sys
import pandas as pd
import pyomo.environ as pyo
from pyomo.opt import SolverFactory
import time


model = pyo.AbstractModel()



"""
SETS 
"""
#sets defined here

#Defining Sets

#Declaring Sets
model.Time = pyo.Set(ordered=True) #Set of time periods
model.TimeLoadShift = pyo.Set(ordered=True) #subset of time periods for load shifting
model.EnergySources = pyo.Set(ordered=True) #Set of different EnergySources e.g. grid, gas and electricity?
model.FlexibleLoads = pyo.Set(ordered=True) #Set of flexible loads
model.Scenarios = pyo.Set(ordered=True) #Set of scenarios

#Reading the Sets, and loading the data

data = pyo.DataPortal() #Loading the data from a data soruce in a uniform manner (Excel)

data.load(filename="filename with data", format="set", set=model.Time)
data.load(filename="filename with data", format="set", set=model.EnergySources)
data.load(filename="filename with data", format="set", set=model.Batteries)


"""
PARAMETERS
"""


#Defining Parameters

#Declaring Parameters
model.Cost_Energy = pyo.Param(model.EnergySources, model.Time)  # Cost of using energy source i at time t
model.Cost_Export = pyo.Param(model.Time)  # Income from exporting energy to the grid at time t
model.aFRR_Up_Price = pyo.Param(model.Time)  # Price for aFRR up regulation at time t
model.aFRR_Down_Price = pyo.Param(model.Time)  # Price for aFRR down regulation at time t
model.Demand = pyo.Param(model.Time)  # Energy demand at time t
model.Max_Charge_Rate = pyo.Param(model.FlexibleLoads)  # Maximum charge rate of flexible load b [MW]
model.Max_Discharge_Rate = pyo.Param(model.FlexibleLoads)  # Maximum discharge rate of flexible load b [MW]
model.Charge_Efficiency = pyo.Param(model.FlexibleLoads)  # Efficiency of charging flexible load b [-]
model.Discharge_Efficiency = pyo.Param(model.FlexibleLoads)  # Efficiency of discharging flexible load b [-]
model.Max_Storage_Cap = pyo.Param(model.FlexibleLoads)  # Maximum energy storage capacity of flexible load b [MWh]
model.Self_Discharge = pyo.Param(model.FlexibleLoads)  # Self-discharge rate of flexible load b [%]
model.Initial_SOC = pyo.Param(model.FlexibleLoads)  # Initial state of charge for flexible load b [-]
model.Scenario_Probability = pyo.Param(model.Scenarios)  # Probability of scenario s [-]
model.Max_Cable_Capacity = pyo.Param()  # Maximum capacity of power cable for import/export [MW]
model.Up_Shift_Max = pyo.Param()  # Maximum allowable up-shifting in load shifting periods as a percentage of demand [% of demand]
model.Down_Shift_Max = pyo.Param()  # Maximum allowable down-shifting in load shifting periods as a percentage of demand [% of demand]

#Reading the Parameters, and loading the data

data = pyo.DataPortal() #Loading the data from a data soruce in a uniform manner (Excel)

data.load(filename="filename with data", format="set", set=model.Time)
data.load(filename="filename with data", format="set", set=model.EnergySources)
data.load(filename="filename with data", format="set", set=model.Batteries)



"""
VARIABLES
"""



#Defining Variables

#Declaring Variables
model.Time = pyo.Set(ordered=True) #Set of time periods
model.EnergySources = pyo.Set(ordered=True) #Set of different EnergySources e.g. grid, gas and electricity?
model.Batteries = pyo.Set(ordered=True) #Set of different batteries

#Reading the Sets, and loading the data

data = pyo.DataPortal() #Loading the data from a data soruce in a uniform manner (Excel)

data.load(filename="filename with data", format="set", set=model.Time)
data.load(filename="filename with data", format="set", set=model.EnergySources)
data.load(filename="filename with data", format="set", set=model.Batteries)


"""
Defining a function that reads our data from the excel File
"""

def Read_Excel(name): 

    #Reading the input of excel file and put data into dataframes
    #data seperated between each sheet and stored into one dictionary

    data = {}    #A dictionary storing the input data

    #Specific dictionaries for the data we want tio extract:

    Dictionary1 = {}
    Dictionary2 = {}
    Dictionary3 = {}

df = pd.read_excel(name, sheet_name = ("Name of excel sheet we want to get"), spirows = 2, nrows =5,usecols =  )