#write code here

import numpy as np
import sys
import pandas as pd
import pyomo.environ as pyo
from pyomo.opt import SolverFactory
import time


model = pyo.AbstractModel()

data = pyo.DataPortal() #Loading the data from a data soruce in a uniform manner (Excel)

"""
SETS 
"""
#sets defined here

#Defining Sets

#Declaring Sets
model.Time = pyo.Set(ordered=True) #Set of time periods (hours)
model.TimeLoadShift = pyo.Set(within=model.Time) #Subset of time periods for load shifting
model.ElectricitySources = pyo.Set(ordered=True) #Set of different ElectricitySources e.g. grid, solar
model.FlexibleLoads = pyo.Set(ordered=True) #Set of flexible loads (batteries)
model.ShiftableLoads = pyo.Set(within=model.FlexibleLoads) #Subset of shiftable loads (shift-able batteries)
model.Scenarios = pyo.Set(ordered=True) #Set of scenarios

#Reading the Sets, and loading the data

data = pyo.DataPortal() #Loading the data from a data soruce in a uniform manner (Excel)

data.load(filename="Time_data.tab", format="set", set=model.Time)
data.load(filename="LoadShiftTimeWindow.tab", format="set", set=model.TimeLoadShift)
data.load(filename="ElectricitySources.tab", format="set", set=model.ElectricitySources)
data.load(filename="FlexibleLoad.tab", format="set", set=model.FlexibleLoads)
data.load(filename="ShiftableLoads.tab", format="set", set=model.ShiftableLoads)
data.load(filename="Defining_Scenarios.tab", format="set", set=model.Scenarios)

"""
PARAMETERS
"""
#Declaring Parameters
model.Cost_Energy = pyo.Param(model.ElectricitySources, model.Time, default=0.0)  # Cost of using energy source i at time t
model.Cost_Export = pyo.Param(model.Time)  # Income from exporting energy to the grid at time t
model.aFRR_Up_Price = pyo.Param(model.Time, default=0.0)  # Price for aFRR up regulation at time t
model.aFRR_Down_Price = pyo.Param(model.Time, default=0.0)  # Price for aFRR down regulation at time t
model.Demand = pyo.Param(model.Time)  # Energy demand at time t
model.Max_Charge_Rate = pyo.Param(model.FlexibleLoads, default = 1)  # Maximum charge rate of flexible load b [MW]
model.Max_Discharge_Rate = pyo.Param(model.FlexibleLoads, default = 1)  # Maximum discharge rate of flexible load b [MW]
model.Charge_Efficiency = pyo.Param(model.FlexibleLoads)  # Efficiency of charging flexible load b [-]
model.Discharge_Efficiency = pyo.Param(model.FlexibleLoads)  # Efficiency of discharging flexible load b [-]
model.Max_Storage_Cap = pyo.Param(model.FlexibleLoads)  # Maximum energy storage capacity of flexible load b [MWh]
model.Self_Discharge = pyo.Param(model.FlexibleLoads)  # Self-discharge rate of flexible load b [%]
model.Initial_SOC = pyo.Param(model.FlexibleLoads)  # Initial state of charge for flexible load b [-]
model.Scenario_Probability = pyo.Param(model.Scenarios)  # Probability of scenario s [-]
model.Max_Cable_Capacity = pyo.Param()  # Maximum capacity of power cable for import/export [MW]
model.Up_Shift_Max = pyo.Param()  # Maximum allowable up-shifting in load shifting periods as a percentage of demand [% of demand]
model.Down_Shift_Max = pyo.Param()  # Maximum allowable down-shifting in load shifting periods as a percentage of demand [% of demand]

#Reading the Parameters, and loading the data

data.load(filename="ElectricityCost.tab", param=model.Cost_Energy, format = "table")
data.load(filename="CostExport.tab", param=model.Cost_Export, format = "table")
data.load(filename="aFRR_upPrice.tab", param=model.aFRR_Up_Price, format = "table")
data.load(filename="aFRR_dwnPrice.tab", param=model.aFRR_Down_Price, format = "table")
data.load(filename="EnergyDemand.tab", param=model.Demand, format = "table")
data.load(filename="MaxChargeRate.tab", param=model.Max_Charge_Rate, format = "table")
data.load(filename="MaxDischargeRate.tab", param=model.Max_Discharge_Rate, format = "table")
data.load(filename="Charge_efficiency.tab", param=model.Charge_Efficiency, format = "table")
data.load(filename="Discharge_efficiency.tab", param=model.Discharge_Efficiency, format = "table")
data.load(filename="Max_Storage_capacity.tab", param=model.Max_Storage_Cap, format = "table")
data.load(filename="SelfDischarge.tab", param=model.Self_Discharge, format = "table")
data.load(filename="InitialSOC.tab", param=model.Initial_SOC, format = "table")
data.load(filename="ScenarioProbability.tab", param=model.Scenario_Probability, format = "table")
data.load(filename="Max_transmission_cap.tab", param=model.Max_Cable_Capacity, format = "table")
data.load(filename="MaximumUpShift.tab", param=model.Up_Shift_Max, format = "table")
data.load(filename="MaximumDownShift.tab", param=model.Down_Shift_Max, format = "table")


"""
VARIABLES
"""


#Defining Variables

#Declaring Variables
model.x_aFRR_UP = pyo.Var(model.Time, domain= pyo.NonNegativeReals)
model.x_aFRR_DWN = pyo.Var(model.Time, domain= pyo.NonNegativeReals)
model.y_supply = pyo.Var(model.Scenarios, model.Time, model.ElectricitySources, domain= pyo.NonNegativeReals)
model.z_export = pyo.Var(model.Scenarios, model.Time, domain= pyo.NonNegativeReals)
model.q_charge = pyo.Var(model.Scenarios, model.Time, model.FlexibleLoads, domain= pyo.NonNegativeReals)
model.q_discharge = pyo.Var(model.Scenarios, model.Time, model.FlexibleLoads, domain= pyo.NonNegativeReals)
model.e_stored = pyo.Var(model.Time, model.FlexibleLoads, domain= pyo.NonNegativeReals)

"""
STATING THE MATHEMATICAL MODEL
"""

"""
OBJECTIVE FUNCTION
"""
def Objective(model):
    return -(sum(model.x_aFRR_UP[t]*model.aFRR_Up_Price[t] + model.x_aFRR_DWN[t]*model.aFRR_Down_Price[t] for t in model.Time)) + \
        sum(model.Scenario_Probability[s] * sum(sum(model.y_supply[s, t, i] * model.Cost_Energy[i, t] for i in model.ElectricitySources) - model.z_export[s, t] * model.Cost_Export[t] for t in model.Time) for s in model.Scenarios)
model.OBJ = pyo.Objective(rule = Objective, sense = pyo.minimize)

"""
CONSTRAINTS
"""  
def EnergyBalance(model, t, s): 
    return model.Demand[t] + model.x_aFRR_UP[t] - model.x_aFRR_DWN[t] == \
           sum(model.y_supply[s, t, i] for i in model.ElectricitySources) - model.z_export[s, t] - \
           sum(model.Charge_Efficiency[b] * model.q_charge[s, t, b] - model.q_discharge[s, t, b] for b in model.FlexibleLoads)
model.EnergyBalance_constraint = pyo.Constraint(model.Time, model.Scenarios, rule=EnergyBalance)

def CapacityConstraintLoadShifting_upper(model, t, b):
    return model.e_stored[t, b] <= model.Down_Shift_Max * model.Demand[t]
model.CapacityConstraintLoadShifting_upper = pyo.Constraint(model.Time, model.ShiftableLoads, rule=CapacityConstraintLoadShifting_upper)

def CapacityConstraintLoadShifting_lower(model, t, b):
    return model.e_stored[t, b] >= model.Up_Shift_Max * model.Demand[t]
model.CapacityConstraintLoadShifting_lower = pyo.Constraint(model.Time, model.ShiftableLoads, rule=CapacityConstraintLoadShifting_lower)

def LoadShiftingTimeWindow(model, t, b):
    if t in model.TimeLoadShift:
        return model.e_stored[t, b] == 0.5*model.Demand[t]
    return pyo.Constraint.Skip
model.LoadShifting_TimeWindow_constraint = pyo.Constraint(model.Time, model.ShiftableLoads, rule=LoadShiftingTimeWindow)

def aFRRUpLimit(model, t, s):
    return model.x_aFRR_UP[t] <= sum(model.q_discharge[s, t, b] for b in model.FlexibleLoads)
model.aFRRUpLimit_constraint = pyo.Constraint(model.Time, model.Scenarios, rule=aFRRUpLimit)

def aFRRDownLimit(model, t, s):
    return model.x_aFRR_DWN[t] <= sum(model.q_charge[s, t, b] for b in model.FlexibleLoads)
model.aFRRDownLimit_constraint = pyo.Constraint(model.Time, model.Scenarios, rule=aFRRDownLimit)

def ChargeLimit(model, t, s, b):
    return model.q_charge[s, t, b] <= model.Max_Charge_Rate[b]
model.ChargeLimit_constraint = pyo.Constraint(model.Time, model.Scenarios, model.FlexibleLoads, rule=ChargeLimit)

def DischargeLimit(model, t, s, b):
    return model.q_discharge[s, t, b] <= model.Max_Discharge_Rate[b]
model.DischargeLimit_constraint = pyo.Constraint(model.Time, model.Scenarios, model.FlexibleLoads, rule=DischargeLimit)

def StorageDynamics(model, t, s, b):
    if t > 1:
        return model.e_stored[t, b] == model.e_stored[t-1, b] * (1 - model.Self_Discharge[b]) + model.q_charge[s, t, b] - (model.q_discharge[s, t, b])/(model.Discharge_Efficiency[b])
    else:
        return model.e_stored[t, b] == model.Initial_SOC[b]*model.Max_Storage_Cap[b]
model.StorageDynamics_constraint = pyo.Constraint(model.Time, model.Scenarios, model.FlexibleLoads, rule=StorageDynamics)

def EnergyLimits(model, t, b):
    return model.e_stored[t, b] <= model.Max_Storage_Cap[b]
model.EnergyLimits_constraint = pyo.Constraint(model.Time, model.FlexibleLoads, rule=EnergyLimits)

#def InitFlexibleAssets(model, b):
#    return model.e_stored[1, b] == model.Initial_SOC[b]*model.Max_Storage_Cap[b]
#model.InitFlexibleAssets_constraint = pyo.Constraint(model.FlexibleLoads, rule=InitFlexibleAssets)

#def ImportLimitation(model, t, s, i):
#    return model.y_supply[s, t, i] + model.x_aFRR_DWN[t] <= model.Max_Cable_Capacity
#model.ImportLimitation_constraint = pyo.Constraint(model.Time, model.Scenarios, model.ElectricitySources, rule=ImportLimitation)

def SupplyLimitation(model, t, s, i):
    return model.y_supply[s, t, i] <= 20 #model.Max_Supply[s, t, i]
model.SupplyLimitation_constraint = pyo.Constraint(model.Time, model.Scenarios, model.ElectricitySources, rule=SupplyLimitation)

def ExportLimitation(model, t, s):
    return model.z_export[s, t] + model.x_aFRR_UP[t] <= model.Max_Cable_Capacity
model.ExportLimitation_constraint = pyo.Constraint(model.Time, model.Scenarios, rule=ExportLimitation)


"""
MATCHING DATA FROM CASE WITH MATHEMATICAL MODEL AND PRINTING DATA
"""
our_model = model.create_instance(data)   
our_model.dual = pyo.Suffix(direction=pyo.Suffix.IMPORT) #Import dual values into solver results
#import pdb; pdb.set_trace()
#

"""
SOLVING PROBLEM
"""
opt = SolverFactory("gurobi", Verbose=True)
results = opt.solve(our_model)

"""
DISPLAY RESULTS??
"""
our_model.display()
our_model.dual.display()

"""
EXTRACT VALUE OF VARIABLES AND WRITE THEM INTO EXCEL FILE
"""

def save_results_to_excel(model_instance):
    # Create an Excel writer object
    with pd.ExcelWriter('Variable_results.xlsx', engine='xlsxwriter') as writer:
        
        # Storing x_aFRR_UP results
        x_aFRR_UP_data = [(t, pyo.value(model_instance.x_aFRR_UP[t])) for t in model_instance.Time]
        x_aFRR_UP_df = pd.DataFrame(x_aFRR_UP_data, columns=['Time', 'x_aFRR_UP'])
        x_aFRR_UP_df.to_excel(writer, sheet_name='x_aFRR_UP', index=False)
        
        # Storing x_aFRR_DWN results
        x_aFRR_DWN_data = [(t, pyo.value(model_instance.x_aFRR_DWN[t])) for t in model_instance.Time]
        x_aFRR_DWN_df = pd.DataFrame(x_aFRR_DWN_data, columns=['Time', 'x_aFRR_DWN'])
        x_aFRR_DWN_df.to_excel(writer, sheet_name='x_aFRR_DWN', index=False)
        
        # Storing y_supply results
        y_supply_data = [(s, t, i, pyo.value(model_instance.y_supply[s, t, i])) for s in model_instance.Scenarios for t in model_instance.Time for i in model_instance.ElectricitySources]
        y_supply_df = pd.DataFrame(y_supply_data, columns=['Scenario', 'Time', 'EnergySource', 'y_supply'])
        y_supply_df.to_excel(writer, sheet_name='y_supply', index=False)
        
        # Storing z_export results
        z_export_data = [(s, t, pyo.value(model_instance.z_export[s, t])) for s in model_instance.Scenarios for t in model_instance.Time]
        z_export_df = pd.DataFrame(z_export_data, columns=['Scenario', 'Time', 'z_export'])
        z_export_df.to_excel(writer, sheet_name='z_export', index=False)
        
        # Storing q_charge results
        q_charge_data = [(s, t, b, pyo.value(model_instance.q_charge[s, t, b])) for s in model_instance.Scenarios for t in model_instance.Time for b in model_instance.FlexibleLoads]
        q_charge_df = pd.DataFrame(q_charge_data, columns=['Scenario', 'Time', 'FlexibleLoad', 'q_charge'])
        q_charge_df.to_excel(writer, sheet_name='q_charge', index=False)
        
        # Storing q_discharge results
        q_discharge_data = [(s, t, b, pyo.value(model_instance.q_discharge[s, t, b])) for s in model_instance.Scenarios for t in model_instance.Time for b in model_instance.FlexibleLoads]
        q_discharge_df = pd.DataFrame(q_discharge_data, columns=['Scenario', 'Time', 'FlexibleLoad', 'q_discharge'])
        q_discharge_df.to_excel(writer, sheet_name='q_discharge', index=False)
        
        # Storing e_stored results (for flexible loads)
        e_stored_data = [(t, b, pyo.value(model_instance.e_stored[t, b])) for t in model_instance.Time for b in model_instance.FlexibleLoads]
        e_stored_df = pd.DataFrame(e_stored_data, columns=['Time', 'FlexibleLoad', 'e_stored'])
        e_stored_df.to_excel(writer, sheet_name='e_stored', index=False)

# Call the function to save the results
save_results_to_excel(our_model)


print("Results saved to Variable_Results.xlsx")
